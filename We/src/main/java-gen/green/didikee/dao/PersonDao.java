package green.didikee.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import green.didikee.model.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(2, Integer.class, "sex", false, "SEX");
        public final static Property Age = new Property(3, Integer.class, "age", false, "AGE");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property FirstDate = new Property(5, Long.class, "firstDate", false, "FIRST_DATE");
        public final static Property UpdateDate = new Property(6, Long.class, "updateDate", false, "UPDATE_DATE");
        public final static Property PhoneNumbers = new Property(7, String.class, "phoneNumbers", false, "PHONE_NUMBERS");
        public final static Property Emails = new Property(8, String.class, "emails", false, "EMAILS");
        public final static Property NoteCount = new Property(9, Long.class, "noteCount", false, "NOTE_COUNT");
        public final static Property LikeCount = new Property(10, Long.class, "likeCount", false, "LIKE_COUNT");
        public final static Property BadCount = new Property(11, Long.class, "badCount", false, "BAD_COUNT");
        public final static Property PhoneCount = new Property(12, Long.class, "phoneCount", false, "PHONE_COUNT");
        public final static Property SmsCount = new Property(13, Long.class, "smsCount", false, "SMS_COUNT");
        public final static Property SexCount = new Property(14, Long.class, "sexCount", false, "SEX_COUNT");
        public final static Property Star = new Property(15, Integer.class, "star", false, "STAR");
        public final static Property Desc = new Property(16, String.class, "desc", false, "DESC");
        public final static Property SubDesc = new Property(17, String.class, "subDesc", false, "SUB_DESC");
        public final static Property Birthday = new Property(18, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property Constellation = new Property(19, Integer.class, "constellation", false, "CONSTELLATION");
        public final static Property Tag = new Property(20, String.class, "tag", false, "TAG");
        public final static Property ContactID = new Property(21, String.class, "contactID", false, "CONTACT_ID");
    }


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"SEX\" INTEGER," + // 2: sex
                "\"AGE\" INTEGER," + // 3: age
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"FIRST_DATE\" INTEGER," + // 5: firstDate
                "\"UPDATE_DATE\" INTEGER," + // 6: updateDate
                "\"PHONE_NUMBERS\" TEXT," + // 7: phoneNumbers
                "\"EMAILS\" TEXT," + // 8: emails
                "\"NOTE_COUNT\" INTEGER," + // 9: noteCount
                "\"LIKE_COUNT\" INTEGER," + // 10: likeCount
                "\"BAD_COUNT\" INTEGER," + // 11: badCount
                "\"PHONE_COUNT\" INTEGER," + // 12: phoneCount
                "\"SMS_COUNT\" INTEGER," + // 13: smsCount
                "\"SEX_COUNT\" INTEGER," + // 14: sexCount
                "\"STAR\" INTEGER," + // 15: star
                "\"DESC\" TEXT," + // 16: desc
                "\"SUB_DESC\" TEXT," + // 17: subDesc
                "\"BIRTHDAY\" INTEGER," + // 18: birthday
                "\"CONSTELLATION\" INTEGER," + // 19: constellation
                "\"TAG\" TEXT," + // 20: tag
                "\"CONTACT_ID\" TEXT);"); // 21: contactID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(3, sex);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(4, age);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        Long firstDate = entity.getFirstDate();
        if (firstDate != null) {
            stmt.bindLong(6, firstDate);
        }
 
        Long updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(7, updateDate);
        }
 
        String phoneNumbers = entity.getPhoneNumbers();
        if (phoneNumbers != null) {
            stmt.bindString(8, phoneNumbers);
        }
 
        String emails = entity.getEmails();
        if (emails != null) {
            stmt.bindString(9, emails);
        }
 
        Long noteCount = entity.getNoteCount();
        if (noteCount != null) {
            stmt.bindLong(10, noteCount);
        }
 
        Long likeCount = entity.getLikeCount();
        if (likeCount != null) {
            stmt.bindLong(11, likeCount);
        }
 
        Long badCount = entity.getBadCount();
        if (badCount != null) {
            stmt.bindLong(12, badCount);
        }
 
        Long phoneCount = entity.getPhoneCount();
        if (phoneCount != null) {
            stmt.bindLong(13, phoneCount);
        }
 
        Long smsCount = entity.getSmsCount();
        if (smsCount != null) {
            stmt.bindLong(14, smsCount);
        }
 
        Long sexCount = entity.getSexCount();
        if (sexCount != null) {
            stmt.bindLong(15, sexCount);
        }
 
        Integer star = entity.getStar();
        if (star != null) {
            stmt.bindLong(16, star);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(17, desc);
        }
 
        String subDesc = entity.getSubDesc();
        if (subDesc != null) {
            stmt.bindString(18, subDesc);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(19, birthday);
        }
 
        Integer constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindLong(20, constellation);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(21, tag);
        }
 
        String contactID = entity.getContactID();
        if (contactID != null) {
            stmt.bindString(22, contactID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(3, sex);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(4, age);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        Long firstDate = entity.getFirstDate();
        if (firstDate != null) {
            stmt.bindLong(6, firstDate);
        }
 
        Long updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(7, updateDate);
        }
 
        String phoneNumbers = entity.getPhoneNumbers();
        if (phoneNumbers != null) {
            stmt.bindString(8, phoneNumbers);
        }
 
        String emails = entity.getEmails();
        if (emails != null) {
            stmt.bindString(9, emails);
        }
 
        Long noteCount = entity.getNoteCount();
        if (noteCount != null) {
            stmt.bindLong(10, noteCount);
        }
 
        Long likeCount = entity.getLikeCount();
        if (likeCount != null) {
            stmt.bindLong(11, likeCount);
        }
 
        Long badCount = entity.getBadCount();
        if (badCount != null) {
            stmt.bindLong(12, badCount);
        }
 
        Long phoneCount = entity.getPhoneCount();
        if (phoneCount != null) {
            stmt.bindLong(13, phoneCount);
        }
 
        Long smsCount = entity.getSmsCount();
        if (smsCount != null) {
            stmt.bindLong(14, smsCount);
        }
 
        Long sexCount = entity.getSexCount();
        if (sexCount != null) {
            stmt.bindLong(15, sexCount);
        }
 
        Integer star = entity.getStar();
        if (star != null) {
            stmt.bindLong(16, star);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(17, desc);
        }
 
        String subDesc = entity.getSubDesc();
        if (subDesc != null) {
            stmt.bindString(18, subDesc);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(19, birthday);
        }
 
        Integer constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindLong(20, constellation);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(21, tag);
        }
 
        String contactID = entity.getContactID();
        if (contactID != null) {
            stmt.bindString(22, contactID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // age
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // firstDate
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // updateDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phoneNumbers
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // emails
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // noteCount
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // likeCount
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // badCount
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // phoneCount
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // smsCount
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // sexCount
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // star
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // desc
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // subDesc
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // birthday
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // constellation
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tag
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // contactID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstDate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUpdateDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setPhoneNumbers(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmails(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNoteCount(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setLikeCount(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setBadCount(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setPhoneCount(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setSmsCount(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setSexCount(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setStar(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setDesc(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSubDesc(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBirthday(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setConstellation(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setTag(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setContactID(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Person entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
